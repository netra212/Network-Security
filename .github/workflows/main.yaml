name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-ecr-images:
    name: Continous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Install Utilities
          run: |
            sudo apt-get update
            sudo apt-get install -y jq unzip

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}
      
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
          with:
            driver: docker

        - name: Log in to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1

        - name: Build and push Docker image to Amazon ECR
          id: build-image
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}  # MUST BE DEFINED
            IMAGE_TAG: latest
          run: |
            echo "🚀 Registry: $ECR_REGISTRY"
            echo "📦 Repo: $ECR_REPOSITORY"
            echo "🏷️  Tag: $IMAGE_TAG"

            if [ -z "$ECR_REPOSITORY" ]; then
              echo "❌ ECR_REPOSITORY is empty. Please set the secret 'ECR_REPOSITORY_NAME' in GitHub."
              exit 1
            fi

            docker buildx build \
              --platform linux/amd64 \
              --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
              --push \
              .
            echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        
  Continous-Deployment:
    needs: build-and-push-ecr-images
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Pull latest images
        run: | 
          docker pull ${{ secrets.AWS_ECR_LOGIN_URI }} // ${{ secrets.ECR_REPOSITORY_NAME }}:latest
      
      - name: Run Docker Image to serve users
        run: |
          docker run -d -p 8080:8080 --ipc="host" --name=networksecurity -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' -e 'AWS_REGION=${{ secrets.AWS_REGION }}' ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
      - name: Clean previous images and containers
        run: |
          docker system prune -f 